#$%2$%#
def bubble_sort(lst):
    n = len(lst)
    for i in range(n):
        for j in range(0, n-i-1):
            if lst[j] > lst[j+1] :
                lst[j], lst[j+1] = lst[j+1], lst[j]
    return lst

#$%3$%#
def quick_sort(lst):
    if len(lst) <= 1:
        return lst
    pivot = lst[len(lst) // 2]
    left = [x for x in lst if x < pivot]
    middle = [x for x in lst if x == pivot]
    right = [x for x in lst if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)


#$%5$%#
def insertion_sort(lst):
    for i in range(1, len(lst)):
        key = lst[i]
        j = i-1
        while j >=0 and key < lst[j] :
                lst[j+1] = lst[j]
                j -= 1
        lst[j+1] = key
    return lst

#$%6$%#
def selection_sort(lst):
    for i in range(len(lst)):
        min_idx = i
        for j in range(i+1, len(lst)):
            if lst[min_idx] > lst[j]:
                min_idx = j
        lst[i], lst[min_idx] = lst[min_idx], lst[i]
    return lst

#$%7$%#
def shell_sort(lst):
    gap = len(lst) // 2
    while gap > 0:
        for i in range(gap, len(lst)):
            temp = lst[i]
            j = i
            while  j >= gap and lst[j-gap] >temp:
                lst[j] = lst[j-gap]
                j -= gap
            lst[j] = temp
        gap //= 2
    return lst

#$%8$%#
def heap_sort(lst):
    import heapq
    heapq.heapify(lst)
    return [heapq.heappop(lst) for _ in range(len(lst))]

#$%9$%#
def counting_sort(lst):
    max_val = max(lst)
    m = max_val + 1
    count = [0] * m                
    for a in lst:
        count[a] += 1             
    i = 0
    for a in range(m):            
        for c in range(count[a]):  
            lst[i] = a
            i += 1
    return lst

#$%10$%#
def radix_sort(lst):
    RADIX = 10
    maxLength = False
    tmp, placement = -1, 1
    while not maxLength:
        maxLength = True
        buckets = [list() for _ in range(RADIX)]
        for i in lst:
            tmp = i // placement
            buckets[tmp % RADIX].append(i)
            if maxLength and tmp > 0:
                maxLength = False
        a = 0
        for b in range(RADIX):
            buck = buckets[b]
            for i in buck:
                lst[a] = i
                a += 1
        placement *= RADIX
    return lst

#$%11$%#
def bucket_sort(lst):
    if len(lst) == 0:
        return lst
    min_val = min(lst)
    max_val = max(lst)
    bucket_range = (max_val-min_val) / len(lst)
    count_list = [0]*(len(lst)+1)
    for num in lst:
        count_list[int((num-min_val)//bucket_range)] += 1
    sorted_list = []
    for i in range(len(count_list)):
        if count_list[i] != 0:
            sorted_list += [i*bucket_range + min_val]*count_list[i]
    return sorted_list

#$%12$%#
def cocktail_sort(lst):
    n = len(lst)
    swapped = True
    start = 0
    end = n-1
    while (swapped==1):
        swapped = False
        for i in range (start, end):
            if (lst[i] > lst[i+1]) :
                lst[i], lst[i+1]= lst[i+1], lst[i]
                swapped=True
        if (swapped==False):
            break
        swapped = False
        end = end-1
        for i in range(end-1, start-1,-1):
            if (lst[i] > lst[i+1]):
                lst[i], lst[i+1] = lst[i+1], lst[i]
                swapped = True
        start = start + 1
    return lst

#$%13$%#
def comb_sort(lst):
    shrink_fact = 1.3
    gaps = len(lst)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(lst):
            if lst[i] > lst[i+gaps]:
                lst[i], lst[i+gaps] = lst[i+gaps], lst[i]
                swapped = True
            i += 1
    return lst

#$%14$%#
def gnome_sort(lst):
    pos = 0
    while pos < len(lst):
        if (pos == 0 or lst[pos] >= lst[pos - 1]):
            pos = pos + 1
        else:
            lst[pos], lst[pos - 1] = lst[pos - 1], lst[pos]
            pos = pos - 1
    return lst

#$%15$%#
def cycle_sort(lst):
    writes = 0
    for cycleStart in range(0, len(lst) - 1):
        item = lst[cycleStart]
        pos = cycleStart
        for i in range(cycleStart + 1, len(lst)):
            if lst[i] < item:
                pos += 1
        if pos == cycleStart:
            continue
        while item == lst[pos]:
            pos += 1
        lst[pos], item = item, lst[pos]
        writes += 1
        while pos != cycleStart:
            pos = cycleStart
            for i in range(cycleStart + 1, len(lst)):
                if lst[i] < item:
                    pos += 1
            while item == lst[pos]:
                pos += 1
            lst[pos], item = item, lst[pos]
            writes += 1
    return lst

#$%16$%#
def pancake_sort(lst):
    cur = len(lst)
    while cur > 1:
        mi = lst.index(max(lst[0:cur]))
        lst = lst[mi::-1] + lst[mi+1:len(lst)]
        lst = lst[cur-1::-1] + lst[cur:len(lst)]
        cur -= 1
    return lst


#$%18$%#
def bogo_sort(lst):
    import random
    while lst != sorted(lst):
        random.shuffle(lst)
    return lst

#$%19$%#
def sleep_sort(lst):
    import time
    import threading
    result = []
    def add_to_result(x):
        time.sleep(x)
        result.append(x)
    threads = []
    for value in lst:
        thread = threading.Thread(target=add_to_result, args=(value,))
        threads.append(thread)
        thread.start()
    for thread in threads:
        thread.join()
    return result

#$%20$%#
def bead_sort(lst):
    if all([type(x) == int and x >= 0 for x in lst]):
        return sorted(lst)
    else:
        raise ValueError("List elements must be positive integers")

#$%21$%#
def pigeonhole_sort(lst):
    min_val = min(lst)
    max_val = max(lst)
    size = max_val - min_val + 1
    holes = [0] * size
    for x in lst:
        assert type(x) is int, "integers only please"
        holes[x - min_val] += 1
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            lst[i] = count + min_val
            i += 1
    return lst

#$%22$%#
def tree_sort(lst):
    from bst import BST
    bst = BST()
    for el in lst:
        bst.insert(el)
    return bst.inorder()

#$%23$%#
def tim_sort(lst):
    from timsort import TimSort
    ts = TimSort(lst)
    ts.sort()
    return lst

#$%24$%#
def bitonic_sort(lst):
    def compare(i, j, dire):
        if (lst[i] > lst[j]) == dire:
            lst[i], lst[j] = lst[j], lst[i]
    def bitonic_merge(low, cnt, dire):
        if cnt > 1:
            k = cnt // 2
            for i in range(low, low + k):
                compare(i, i + k, dire)
            bitonic_merge(low, k, dire)
            bitonic_merge(low + k, k, dire)
    def bitonic_sort_rec(low, cnt, dire):
        if cnt > 1:
            k = cnt // 2
            bitonic_sort_rec(low, k, not dire)
            bitonic_sort_rec(low + k, k, dire)
            bitonic_merge(low, cnt, dire)
    bitonic_sort_rec(0, len(lst), True)
    return lst

#$%25$%#
def strand_sort(lst):
    def merge(left, right):
        if not left:
            return right
        if not right:
            return left
        if left[0] < right[0]:
            return [left[0]] + merge(left[1:], right)
        return [right[0]] + merge(left, right[1:])
    def strand_sort(lst):
        if len(lst) < 2:
            return lst
        i, strand = 1, [lst.pop(0)]
        while i < len(lst):
            if lst[i] > strand[-1]:
                strand.append(lst.pop(i))
            else:
                i += 1
        return merge(strand, strand_sort(lst))
    return strand_sort(lst)

#$%26$%#
def patience_sort(lst):
    import bisect
    piles = []
    for x in lst:
        new_pile = [x]
        i = bisect.bisect_left(piles, new_pile)
        if i != len(piles):
            piles[i].insert(0, x)
        else:
            piles.append(new_pile)
    for i in range(len(lst)):
        small_pile = piles[0]
        for j in range(1, len(piles)):
            if piles[j][0] < small_pile[0]:
                small_pile = piles[j]
        lst[i] = small_pile.pop(0)
        if small_pile == []:
            piles.remove(small_pile)
    return lst

#$%27$%#
def permutation_sort(lst):
    from itertools import permutations
    for permutation in permutations(lst):
        if all(permutation[i] <= permutation[i + 1] for i in range(len(permutation) - 1)):
            return list(permutation)

#$%28$%#
def spaghetti_sort(lst):
    max_val = max(lst)
    length = len(lst)
    ptr = [0] * length
    for i in range(length):
        ptr[i] = lst[i]
    ptr.sort()
    return ptr

#$%29$%#
def gravity_sort(lst):
    max_val = max(lst)
    beads = [0] * len(lst) * max_val
    for i in range(len(lst)):
        for j in range(lst[i]):
            beads[i + j * len(lst)] = 1
    for i in range(len(lst), len(beads)):
        if beads[i] == 1:
            beads[i - len(lst)], beads[i] = beads[i], beads[i - len(lst)]
    for i in range(len(lst)):
        lst[i] = sum(beads[i::len(lst)])
    return lst

#$%30$%#
def cocktail_shaker_sort(lst):
    for i in range(len(lst)-1, 0, -1):
        swapped = False
        for j in range(i, 0, -1):
            if lst[j] < lst[j-1]:
                lst[j], lst[j-1] = lst[j-1], lst[j]
                swapped = True
        for j in range(i):
            if lst[j] > lst[j+1]:
                lst[j], lst[j+1] = lst[j+1], lst[j]
                swapped = True
        if not swapped:
            return lst

#$%31$%#
def shell_sort(lst):
    gap = len(lst) // 2
    while gap > 0:
        for i in range(gap, len(lst)):
            temp = lst[i]
            j = i
            while  j >= gap and lst[j-gap] >temp:
                lst[j] = lst[j-gap]
                j -= gap
            lst[j] = temp
        gap //= 2
    return lst

#$%32$%#
def pigeonhole_sort(lst):
    min_val = min(lst)
    max_val = max(lst)
    size = max_val - min_val + 1
    holes = [0] * size
    for x in lst:
        assert type(x) is int, "integers only please"
        holes[x - min_val] += 1
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            lst[i] = count + min_val
            i += 1
    return lst

#$%33$%#
def bogosort(lst):
    import random
    while lst != sorted(lst):
        random.shuffle(lst)
    return lst

#$%34$%#
def gnome_sort(lst):
    pos = 0
    while pos < len(lst):
        if (pos == 0 or lst[pos] >= lst[pos - 1]):
            pos = pos + 1
        else:
            lst[pos], lst[pos - 1] = lst[pos - 1], lst[pos]
            pos = pos - 1
    return lst


#$%36$%#
def pancake_sort(lst):
    cur = len(lst)
    while cur > 1:
        mi = lst.index(max(lst[0:cur]))
        lst = lst[mi::-1] + lst[mi+1:len(lst)]
        lst = lst[cur-1::-1] + lst[cur:len(lst)]
        cur -= 1
    return lst

#$%37$%#
def cycle_sort(lst):
    writes = 0
    for cycleStart in range(0, len(lst) - 1):
        item = lst[cycleStart]
        pos = cycleStart
        for i in range(cycleStart + 1, len(lst)):
            if lst[i] < item:
                pos += 1
        if pos == cycleStart:
            continue
        while item == lst[pos]:
            pos += 1
        lst[pos], item = item, lst[pos]
        writes += 1
        while pos != cycleStart:
            pos = cycleStart
            for i in range(cycleStart + 1, len(lst)):
                if lst[i] < item:
                    pos += 1
            while item == lst[pos]:
                pos += 1
            lst[pos], item = item, lst[pos]
            writes += 1
    return lst

#$%38$%#
def bead_sort(lst):
    if all([type(x) == int and x >= 0 for x in lst]):
        return sorted(lst)
    else:
        raise ValueError("List elements must be positive integers")

#$%39$%#
def bucket_sort(lst):
    if len(lst) == 0:
        return lst
    min_val = min(lst)
    max_val = max(lst)
    bucket_range = (max_val-min_val) / len(lst)
    count_list = [0]*(len(lst)+1)
    for num in lst:
        count_list[int((num-min_val)//bucket_range)] += 1
    sorted_list = []
    for i in range(len(count_list)):
        if count_list[i] != 0:
            sorted_list += [i*bucket_range + min_val]*count_list[i]
    return sorted_list

#$%40$%#
def radix_sort(lst):
    RADIX = 10
    maxLength = False
    tmp, placement = -1, 1
    while not maxLength:
        maxLength = True
        buckets = [list() for _ in range(RADIX)]
        for i in lst:
            tmp = i // placement
            buckets[tmp % RADIX].append(i)
            if maxLength and tmp > 0:
                maxLength = False
        a = 0
        for b in range(RADIX):
            buck = buckets[b]
            for i in buck:
                lst[a] = i
                a += 1
        placement *= RADIX
    return lst

#$%41$%#
def counting_sort(lst):
    max_val = max(lst)
    m = max_val + 1
    count = [0] * m                
    for a in lst:
        count[a] += 1             
    i = 0
    for a in range(m):            
        for c in range(count[a]):  
            lst[i] = a
            i += 1
    return lst

#$%42$%#
def heap_sort(lst):
    def heapify(lst, n, i):
        largest = i
        l = 2 * i + 1
        r = 2 * i + 2
        if l < n and lst[i] < lst[l]:
            largest = l
        if r < n and lst[largest] < lst[r]:
            largest = r
        if largest != i:
            lst[i],lst[largest] = lst[largest],lst[i]
            heapify(lst, n, largest)
    n = len(lst)
    for i in range(n, -1, -1):
        heapify(lst, n, i)
    for i in range(n-1, 0, -1):
        lst[i], lst[0] = lst[0], lst[i]
        heapify(lst, i, 0)
    return lst

#$%43$%#
def shell_sort(lst):
    gap = len(lst) // 2
    while gap > 0:
        for i in range(gap, len(lst)):
            temp = lst[i]
            j = i
            while  j >= gap and lst[j-gap] >temp:
                lst[j] = lst[j-gap]
                j -= gap
            lst[j] = temp
        gap //= 2
    return lst

#$%44$%#
def selection_sort(lst):
    for i in range(len(lst)):
        min_idx = i
        for j in range(i+1, len(lst)):
            if lst[min_idx] > lst[j]:
                min_idx = j
        lst[i], lst[min_idx] = lst[min_idx], lst[i]
    return lst

#$%45$%#
def insertion_sort(lst):
    for i in range(1, len(lst)):
        key = lst[i]
        j = i-1
        while j >=0 and key < lst[j] :
                lst[j+1] = lst[j]
                j -= 1
        lst[j+1] = key
    return lst

#$%46$%#
def merge_sort(lst):
    if len(lst) <= 1:
        return lst
    mid = len(lst) // 2
    left = lst[:mid]
    right = lst[mid:]
    left = merge_sort(left)
    right = merge_sort(right)
    return list(merge(left, right))

#$%47$%#
def quick_sort(lst):
    if len(lst) <= 1:
        return lst
    pivot = lst[len(lst) // 2]
    left = [x for x in lst if x < pivot]
    middle = [x for x in lst if x == pivot]
    right = [x for x in lst if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

#$%48$%#
def bubble_sort(lst):
    n = len(lst)
    for i in range(n):
        for j in range(0, n-i-1):
            if lst[j] > lst[j+1] :
                lst[j], lst[j+1] = lst[j+1], lst[j]
    return lst

#$%49$%#
def monte_carlo_pi(iterations):
    inside_circle = 0
    import random
    for _ in range(iterations):
        x, y = random.random(), random.random()
        if x**2 + y**2 <= 1:
            inside_circle += 1
    return inside_circle

#$%50$%#
def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

#$%51$%#
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)


#$%53$%#
def sieve_of_eratosthenes(n):
    primes = [True for i in range(n+1)]
    p = 2
    while (p * p <= n):
        if (primes[p] == True):
            for i in range(p * p, n+1, p):
                primes[i] = False
        p += 1
    prime_numbers = [p for p in range(2, n) if primes[p]]
    return prime_numbers

#$%54$%#
def collatz(n):
    sequence = [n]
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3*n + 1
        sequence.append(n)
    return sequence